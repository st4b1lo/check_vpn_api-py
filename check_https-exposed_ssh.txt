import paramiko
from openpyxl import Workbook, load_workbook
from openpyxl.styles import Font
from tqdm import tqdm
import getpass

host = input("FMG IP: ")
user = input("username: ")
secret = getpass.getpass("password: ")
port = 22

# Establish SSH connection
ssh = paramiko.SSHClient()
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
ssh.connect(hostname=host, username=user, password=secret, port=port)

try:
    # Execute command and capture output
    command = 'diagnose dvm device list\n'
    stdin, stdout, stderr = ssh.exec_command(command)
    output = stdout.read().decode('utf-8')

    # Process output
    lines = output.strip().split("\n")
    device_info = []
    i = 0
    while i < len(lines):
        line = lines[i]
        if line.startswith('fmgfaz-managed'):
            parts = line.split()
            # Initial info extraction
            info = {
                "TYPE": parts[0],
                "OID": parts[1],
                "SN": parts[2],
                "SN2": "-",  # Placeholder for possible secondary SN in HA
                "HA": parts[3] if parts[3] != '-' else "No",
                "IP": parts[4],
                "NAME": parts[5],
                "ADOM": parts[6],
                "IPS": parts[-3],
                "FIRMWARE": " ".join(parts[-2:]),  # Combining firmware parts
                "STATUS": "Unknown"  # Placeholder for connection status
            }
            device_info.append(info)
        elif "HA cluster member:" in line:
            # Adjusting previous device info with HA details
            secondary_sn = line.split(':')[1].strip().split(' ')[0]  # Extract secondary SN
            device_info[-1]["SN2"] = secondary_sn
        elif "conn: up" in line or "conn: down" in line:
            # Update connection status for the last device added
            status = "Up" if "conn: up" in line else "Down"
            device_info[-1]["STATUS"] = status
        i += 1

    # Create Excel file
    workbook = Workbook()
    sheet = workbook.active

    headers = ["TYPE", "OID", "SN", "SN2", "HA", "IP", "NAME", "ADOM", "IPS", "FIRMWARE", "STATUS"]
    sheet.append(headers)

    # Populate Excel file with device info
    for device in device_info:
        row = [device["TYPE"], device["OID"], device["SN"], device["SN2"], device["HA"],
               device["IP"], device["NAME"], device["ADOM"], device["IPS"], device["FIRMWARE"], device["STATUS"]]
        sheet.append(row)

    # Format header row
    for cell in sheet["1:1"]:
        cell.font = Font(bold=True)

    # Save Excel file
    output_file = "oid_output.xlsx"
    workbook.save(output_file)
    print(f"Output saved to '{output_file}'.")

    # Process for converting Excel to formatted text file for the second part of the script
    input_file = "oid_output.xlsx"
    output_file = "formatted_data.txt"

    # Load Excel file
    workbook = load_workbook(input_file)
    sheet = workbook.active

    # Process data and format for the second part of the script
    formatted_data = []
    for row in sheet.iter_rows(min_row=2, max_row=sheet.max_row, values_only=True):
        name = row[6]
        command = f"execute fmpolicy print-device-object {name} {row[1]} 3 8 Internet"
        formatted_data.append((name, command))

    # Write data to text file
    with open(output_file, 'w') as file:
        for data in formatted_data:
            line = str(data)
            file.write(line + '\n')

    print(f"Formatted data saved in file '{output_file}'.")

    # Excel file creation for the third part of the script
    workbook = Workbook()
    sheet = workbook.active

    # Add column titles
    sheet.cell(row=1, column=1).value = "ADOM"
    sheet.cell(row=1, column=2).value = "HTTPS"

    # Create an interactive shell channel for persistent connection
    channel = ssh.invoke_shell()

    # Execute commands and write results to Excel file
    for row, (name, command) in enumerate(tqdm(formatted_data, desc="Processing"), start=2):
        sheet.cell(row=row, column=1).value = name

        # Send command to server via persistent shell channel
        channel.send(command + '\n')

        # Wait for command completion by reading the output
        output = ""
        while True:
            if channel.recv_ready():
                output += channel.recv(4096).decode('utf-8')
            else:
                continue
            if output.endswith("# "):
                break

        # Process the output and save to file
        if "https" in output:
            result = "YES"
        else:
            result = "NO"

        sheet.cell(row=row, column=2).value = result

    # Close shell channel
    channel.close()

    # Save Excel file for the third part of the script
    output_file = "checkhttps.xlsx"
    workbook.save(output_file)

    print(f"Output saved to file '{output_file}'.")

finally:
    # Close SSH connection
    ssh.close()

    print("SSH connection closed.")
